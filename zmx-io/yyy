


     Keyword GLAS { name args } {
	 $current set $surf glass $name
	 try {
	     $current set $surf glass_ptr [glass-lookup $name]
	 } on error message {
	     puts "missing glass : $name"
	 }
     }


     # NonSequential surface commands
     #
     Keyword NSOH { type args } {
	switch $type {
	 default {
	    if { $nonseq == 0 } {
		set nsoexit [$current get 0 p0 p1 p2 p3 p4 p5 p6]
		$current set 0 p0 0 p1 0 p2 0 p3 0 p4 0 p5 0 p6 0
	    }

	    $current length = $nonseq

	    my SURF $nonseqid-[incr nonseq]

	    lassign $args a b comment

	    my Process-Type $type $comment

	    my [$current get $surf name] set thickness [lindex $nsoexit 3]
	 }
	}
     }
     Keyword NSOA { n aperture } {

	if { $aperture eq  {}  } {
	    $current set $surf aper_type  circular
	    return
	}

	$current set $surf aper_type  UDA
	$current set $surf aper_param [string map { {"} {} } $aperture]

	lappend objects [set aper [::acorn::Aperture [$current get $surf aper_type] [$current get $surf aper_param]]]
	$current set $surf aperture [$aper polygon]
     }
     Keyword NSCS std::vector<char*> argv {}
     Keyword NSOD { n value a b c d e f } {
	 try { my [$current get $surf name] set $::acorn::ZMXNSODMap($surftype,$n) $value 
	 } on error message {
	     my [$current get $surf type] $n $value $a $b $c $d $e $f
	 }
     }
     Keyword NSOP { dx dy dz rx ry rz args } {
	 my [$current get $surf name] set x $dx y $dy z $dz rx $rx ry $ry rz $rz

	 if { [lindex $args 0] eq "MIRROR" } {
	     my [$current get $surf name] set n -1 
	 }
     }
    Keyword FTYP { a b nfield nwave args } { my set nfield $nfield; my set nwave $nwave }
    Keyword STOP (std::vector<char*> argv { my set stop $Id }
    Keyword FLOA (std::vector<char*> argv { set float 1 }



    Keyword WAVL { wave }          { my set wavelength current [expr $wave*10000] }
    Keyword WAVM { n wave weight } {
				    my set wavelength $n wave    [expr $wave*10000]
				    my set wavelength $n weight  $weight
    }
    Keyword WWGT { weight } {	    my set wavelength weight  $weight }
    Keyword WAVN std::vector<char*> argv {
	foreach wave   $args {	    my set wavelength [incr n] wave    [expr $wave*10000] }
    }
    Keyword WWGN std::vector<char*> argv {
	foreach weight $args {      my set wavelength [incr n] weight  $weight }
    }

    Keyword XDAT std::vector<char*> argv {}
    Keyword XFLN std::vector<char*> argv { set fieldx $args }
    Keyword YFLN std::vector<char*> argv { set fieldy $args }
    Keyword XFLD std::vector<char*> argv {}
    Keyword YFLD std::vector<char*> argv {}

    # Pickups
    #
    Keyword PZUP {       from scale offset { column 0 } } { append pup "my xPZUP $Id [expr int($from)] $scale $offset $column\n" }
    Keyword PPAR { param from scale offset { column 0 } } { append pup "my xPPAR $Id [expr int($from)] $scale $offset $column $param\n" }
