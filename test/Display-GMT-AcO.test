#!/usr/bin/env tclkit8.6
#
lappend auto_path /Users/john/lib ./lib ../lib tripack/lib


source tcloo.tcl
source ngon.tcl
source display-common.tcl
source 3d.tcl

package require acorn
package require tripack


ZMX create GMT source zmx-models/GMT-1-AcOWFS-2.ZMX



proc 3d::transform3p { T points } {
    map { x y z } [3d::transform $T {*}[join $points]] { list $x $y $z }
}
proc 3d::bbox { points } {
    set x0  10e15;   set x1 -10e15
    set y0  10e15;   set y1 -10e15
    set z0  10e15;   set z1 -10e15
    
    foreach { x y z } [join $points] {
	if { $x < $x0 } { set x0 $x };   if { $x > $x1 } { set x1 $x }
	if { $y < $y0 } { set y0 $y };   if { $y > $y1 } { set y1 $y }
	if { $z < $z0 } { set z0 $z };   if { $z > $z1 } { set z1 $z }
    }

    list x0 $x0 x1 $x1 y0 $y0 y1 $y1 z0 $z0 z1 $z1
}

proc surface-polygon { m s { zz 0 } } {

    # Obtain a polygon defining the aperture
    #
    if { [$m $s get aper_type] ne "UDA" } {
	set P [map { x y } [polygon 0 0 [$m $s get aper_max] [$m $s get aper_max] -sides 64] { list $x $y 0 }]
    } else {
	set P [[$m $s get aperture] 1 end-2 get x y z]
    }

    # Transform the aperture to the surface position
    #
    foreach {*}[$m $s getdict x y z rx ry rz] { break }

     set T [3d::transforms [3d::rotate z [expr -($rz)] deg] [3d::rotate y $ry deg] [3d::rotate x $rx deg] [3d::translate $x $y [expr { $z }]]]
     set P [3d::transform3p $T $P]
     set N [llength $P]

    set R [acorn::Rays create R 0]

    foreach { px py pz } [join $P] {						; # Put the aperture points in a Rays array
	$R [$R length] set px $px py $py pz $pz kx 0 ky 0 kz 1
    }

    acorn::mkrays R nx 10 ny 10 pz $zz {*}[3d::bbox $P]				; # ray box of interior points

    $m trace1 $s R $zz								; # Trace the rays to the surface.

    # Remove vignetted points that are not part of the aperture polygon
    #
    set i 0
    set p [map { x y z v } [join [R 0 end get px py pz vignetted]] { if { [incr i] > $N && $v } { continue };  list $x $y $z }]
    rename R {}	

    trimesh $p
}


proc display { m } {
    set colors { red green blue yellow cyan magenta }
    set z 0
    set c 0

    foreach { type surf } [$m surfaces] {
	foreach j [iota 0 [$surf length]-1] {
	    set color [lindex $colors [expr $c%[llength $colors]]]

	    set name [$surf $j get name]

	    switch [$m $name get aper_type] {
	     UDA -
	     circular {
		try {
		    if { [$m $name get aper_max] != 0 } {
			.win create polygon [set x [surface-polygon $m $name $z]] -color $color   -style outline 
		    }
		} on error message {
		    puts "$m $name : $message"
		    if { $message eq "floating point value is Not a Number" } { continue }

		    puts $::errorInfo
		    exit
		}

	     }
	    }

	    if { $type eq "sequential" && [$m $name get thickness] ne "Inf" } {
		set z [expr { $z + [$m $name get thickness] }]
		incr c
	    } 
	}
	if { $type ne "sequential" && [$m $name get thickness] ne "Inf" } {
	    set z [expr { $z + [$m $name get thickness] }]
	    incr c
	}
    }
}

GMT print
display GMT

.win transform -camera {} "lookat all"

