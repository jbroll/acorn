#!/usr/bin/env tclkit8.6
#
lappend auto_path ./lib ../lib arec/lib

package require acorn

#acorn::ZMX create ParZMX source zmx-models/Parabola.zmx

source starbase.tcl

proc starbase2ray { table { rays {} } } {
    upvar $table T

    if { $rays eq "" } {
	set rays [::acorn::Rays create rays[incr ::acorn::RAYS] 0]
    }

    starbase_foreachrow T -colvars row {
	$rays [expr $row-1] set px $x py $y pz $z kx $l ky $m kz $n
    }

    set rays
}

starbase_read Start test/ZernData/start.rays
set rays {}

acorn::model Model {
    surface A	{ R    0.0	K  0.0	n  1.00	thickness 	 200 }
    surface B	{ R -400.0	K -1.0	n -1.00	thickness	 -10 type zernike nradius 36 nzterms 10 }
    surface C	{ R    0.0	K  0.0	n -1.00	thickness	 180 type zernike nradius 36 nzterms 10 }
    surface D	{ R    0.0	K  0.0	n  1.00	thickness	   0 }
}

set Zamount 0.05

foreach surf { B C } {
    foreach zz { 1 2 3 4 5 6 7 8 9 10 } {
	set rays [starbase2ray Start $rays]

#set surf C
#set zz   2

	Model $surf set z$zz $Zamount
	Model trace $rays
#exit

	starbase_read ZRay test/ZernData/z[format %02d $zz]-$surf.rays

	set zoff	370

	set sumx 0
	set sumy 0
	set sumz 0
	starbase_foreachrow ZRay -colvars row {
	    lassign [$rays [expr $row-1] get px py pz] px py pz

	    set pz [expr $pz-$zoff]

	    #puts "$px $py $pz		$x $y $z"

	    set sumx [expr { $sumx + ($x - $px)*($x - $px) } ]
	    set sumy [expr { $sumy + ($y - $py)*($y - $py) } ]
	    set sumz [expr { $sumz + ($z - $pz)*($z - $pz) } ]
	}

	puts "$zz	[expr sqrt($sumx)]	[expr sqrt($sumy)]	[expr sqrt($sumz)]"

	unset ZRay
	Model $surf set z$zz 0.0
    }
}

