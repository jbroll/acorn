#!/usr/bin/env tclkit8.6.1
#
lappend auto_path ./lib arec/lib /pool/sao/jroll/acorn/lib

if { [file exists $env(HOME)/.acorn] } {
    source $env(HOME)/.acorn
}

package require acorn
package require nproc

interp alias {} print {} puts

set mask 21			; # The mask is surface 21?
set mm2inch 25.4
set seeing 0.7
set scale [expr { 1.0/($mm2inch*1000/15) }]

set chunksize 30000000

set slitX aper_min 
set slitY aper_max 

source jbr.tcl/starbase.tcl
source jbr.tcl/strtod.tcl
source jbr.tcl/2d.tcl

set model $env(ACORN)/zmx-models/p24_110912af_072512ac_inch.zmx

acorn::ZMX create B source $model

B surface QE { type QE nx 4242 ny 4176
	w0  3500 map0 11303-01-01+ql350n01+N.fits
	w1  4000 map1 11303-01-01+ql400n01+N.fits
	w2  5000 map2 11303-01-01+ql500n01+N.fits
	w3  6500 map3 11303-01-01+ql650n01+N.fits
	w4  9000 map4 11303-01-01+ql900n01+N.fits
	w5 10000 map5 11303-01-01+ql000n01+N.fits
    }
B QE set sx $scale
B QE set sy $scale

#B print
#exit

B config 1

proc plot-rays { rays { v 0 } } {

    foreach {*}[rays stat : $v] {}

    set range [expr { max($xrange, $yrange)*1.1 }]
    set xmin [expr $x - $range/2]
    set xmax [expr $x + $range/2]
    set ymin [expr $y - $range/2]
    set ymax [expr $y + $range/2]

    acorn::prays $rays | "row v==$v | plottable size 8 8 x,y marker circle xaxis min $xmin max $xmax yaxis min $ymin max $ymax"
}


set argv [lassign $argv action]


    proc maskXY { ax ay { w 6300 } } {				; # Trace a ray to the mask and return its X, Y.
	acorn::Rays create ray1 1
	acorn::Rays create trak 79

	ray1 angles : $ax $ay

	B 1 set aper_type none
	B trace ray1 {} $w 0 trak

	set x [trak get 20 px]
	set y [trak get 20 py]
	set v [trak get 20 vignetted]

	rename ray1 {}
	rename trak {}

	return [list $x $y $v]
    }

    proc counts { mag exptime } {			; # compute counts at mag *exptime
	set throughput	0.25
	set counts0		1.09e10
	set	area	[expr { 6.5*6.5 }]

	expr { int($throughput * $counts0 * pow(10, -0.4*$mag) * $exptime * $area) }
    }

    proc vnorm { v { sum {} } } {
	if { $sum eq {} } { set sum [sum $v] }


	if { $sum } {
	    set v [lmap x $v { expr { $x/$sum } }]
	}

	return $v
    }


proc load-spectra { files { scale 1.0 } } {
    if { $scale eq {} } { set scale 1.0 }

    foreach file [lsort $files] {
	set fp [open $file]

	starbase_header X $fp

	set wave {}
	set sky  {}
	set obj  {}

	foreach { w s o } [string trim [read  $fp]] { 
	    lappend wave [expr { $w*10000 }]
	    lappend sky  $s
	    lappend obj  $o
	}

	lappend spectra [dict create							\
			    file $file							\
			    wave $wave							\
			    skysum [expr { int([sum $sky]*$scale) }] sky [vnorm $sky]	\
			    objsum [expr { int([sum $obj]*$scale) }] obj [vnorm $obj]	\
			    specwidth 	[starbase_hdrget X slitwidth]			\
			    specheight 	[starbase_hdrget X slitheight]			\
			    seeing	[starbase_hdrget X seeing]			\
		]
	close $fp
    }

    return $spectra
}

proc trace-slits { mask spectra image { this 0 } } {

    starbase_read Slits $mask
    set RA [strtod [starbase_hdrget Slits ra]]
    set DC [strtod [starbase_hdrget Slits dec]]
    set PA [strtod [starbase_hdrget Slits pa]]

    starbase_foreachrow Slits -colvars {

	if { $this && $this != $row } { continue }

	# Compute the angles of ra and dec
	#
	set ra [expr { ([strtod $ra] -$RA)*15*cos($DC/57.2957795) }]
	set dc [expr {  [strtod $dec]-$DC }]

	lassign [2d::transform [2d::rotate [expr { -$PA }] d] $ra $dc] ax ay

#	    set ax [B get field 1 x]
#	    set ay [B get field 1 y]


	lassign [maskXY $ax $ay] mx my

	B 21 set aper_xoff $mx ; # [expr { $x/$::mm2inch }]
	B 21 set aper_yoff $my ; # [expr { $y/$::mm2inch }]

	B 21 set $::slitX [expr { 0.100/$::mm2inch }]
	B 21 set $::slitY [expr { 0.433/$::mm2inch }]

	set nth [expr { ($row-1) % [llength $spectra] }]

	foreach { name value } [lindex $spectra  $nth] { set $name $value }

	    set slitwidth  [expr { $width  / 0.168 }]
	    set slitheight [expr { $height / 0.168 }]

	    set objsum [expr { $objsum * ( $slitwidth*$slitheight ) / ( $specwidth*$specheight ) }]
	    set objsum [expr int(min($objsum, 100000000))]

	    puts -nonewline "$file $objsum";	flush stdout

	    # Create, trace and bin the object spectrum
	    #
	    acorn::mkrays rays dist uniform n $objsum radius0 15 radius 128
			  rays angles : $ax $ay normal $seeing $seeing box $slitwidth $slitheight


	    puts -nonewline "	waves"; flush stdout
	    rays waves $obj

	    puts -nonewline "	trace"; flush stdout
	    B trace rays {} $wave [nproc]

#plot-rays rays 21
#exit
	    puts -nonewline "	bin"; flush stdout
	    puts -nonewline "	v [rays bin ushort $image 4096 4096 $::scale $::scale]"; flush stdout

	    rename rays {}

	    set skysum [expr { int($skysum * ( $slitwidth*$slitheight ) / ( $specwidth*$specheight )) }]

	    while { $skysum > 0 } {
	        set chunk [expr { min($skysum, 20000000) }]

		puts -nonewline "	sky $skysum"; flush stdout

		# Create, trace and bin the sky spectrum
		#
		acorn::mkrays rays dist uniform n $chunk radius0 15 radius 128
			      rays angles : $ax $ay uniform [expr $slitwidth*1.01] [expr $slitheight*1.01]
		puts -nonewline "	waves"; flush stdout
		rays waves $sky

		puts -nonewline "	trace"; flush stdout
		B trace rays {} $wave 16



		puts -nonewline "	bin"; flush stdout
		puts -nonewline "	v [rays bin ushort $image 4096 4096 $::scale $::scale]"; flush stdout

		set skysum [expr { $skysum-$::chunksize }]

		rename rays {}
	    }

	    puts ""
	#if { $row > 4 } { break }
    }

    return [starbase_name Slits]
}


switch $action {

 noise {
    set tag {}

    lassign $argv mask label tag

    set image   [acorn::malloc [expr { 2*4096*4096 }]]

    acorn::noise   ushort $image 4096 4096 1000 3
    acorn::fits    ushort $image 4096 4096

    if { $tag ne {} } {
        set label $label.$tag
    }

    echo [fits 16 { 4096 4096 } { 1 1 } { 0 0 } $image {}] > [file tail [file root $mask]]-$label.X.fits b
 }

 image {
    set spectra [lassign $argv mask tag slit sScale]

    set spectra [load-spectra $spectra $sScale]
    set image   [acorn::malloc [expr { 2*4096*4096 }]]

    set label   [trace-slits $mask $spectra $image $slit]

    acorn::poisson ushort $image 4096 4096

    if { !$slit } {
        acorn::noise   ushort $image 4096 4096 1000 3
    }

    acorn::fits    ushort $image 4096 4096

    if { $tag ne {} } {
	append label ".$tag"
    }
    if { $slit ne 0 } {
	append label .$slit
    }

    echo [fits 16 { 4096 4096 } { 1 1 } { 0 0 } $image {}] > [file tail [file root $mask]]-$label.fits b
 }
 image-1 {
    set files [lassign $argv mask]

    foreach file [lsort $files] {
	set fp [open $file]

	starbase_header X $fp

	set wave {}
	set sky  {}
	set obj  {}

	foreach { w s o } [split [string trim [read  $fp]]] { 
	    lappend wave [expr { $w*10000 }]
	    lappend sky  $s
	    lappend obj  $o
	}

	lappend spectra [dict create						\
			    file $file						\
			    wave $wave						\
			    sky  $sky						\
			    obj  $obj						\
			    skysum [expr { int([sum $sky]) }] sky [vnorm $sky]	\
			    objsum [expr { int([sum $obj]) }] obj [vnorm $obj]	\
			    slitwidth 	[starbase_hdrget X slitwidth]		\
			    slitheight 	[starbase_hdrget X slitheight]		\
			    seeing	[starbase_hdrget X seeing]		\
		]
	close $fp
    }

    set image [acorn::malloc [expr { 2*4096*4096 }]]

    starbase_read Slits $mask
    set RA [strtod [starbase_hdrget Slits ra]]
    set DC [strtod [starbase_hdrget Slits dec]]
    set PA [strtod [starbase_hdrget Slits pa]]

    starbase_foreachrow Slits -colvars {

	# Compute the angles of ra and dec
	#
	set ra [expr { ([strtod $ra] -$RA)*15*cos($DC/57.2957795) }]
	set dc [expr {  [strtod $dec]-$DC }]

	lassign [2d::transform [2d::rotate [expr { -$PA }] d] $ra $dc] ax ay

#	    set ax [B get field 1 x]
#	    set ay [B get field 1 y]


	lassign [maskXY $ax $ay] mx my

	B 21 set aper_xoff $mx ; # [expr { $x/$mm2inch }]
	B 21 set aper_yoff $my ; # [expr { $y/$mm2inch }]

	B 21 set $slitX [expr { 0.100/$mm2inch }]
	B 21 set $slitY [expr { 0.433/$mm2inch }]

	set nth [expr { ($row-1) % [llength $spectra] }]

	foreach { name value } [lindex $spectra  $nth] { set $name $value }

	    puts -nonewline "$file $objsum";	flush stdout

	    # Create, trace and bin the object spectrum
	    #
	    acorn::mkrays rays dist uniform n $objsum radius0 15 radius 128
			  rays angles : $ax $ay normal $seeing $seeing box $slitwidth $slitheight


	    puts -nonewline "	waves"; flush stdout
	    rays waves $obj

	    puts -nonewline "	trace"; flush stdout
	    B trace rays {} $wave [nproc]

	    puts -nonewline "	bin"; flush stdout
	    puts -nonewline "	v [rays bin ushort $image 4096 4096 $scale $scale]"; flush stdout

	    rename rays {}

	    puts -nonewline "	sky $skysum"; flush stdout

	    # Create, trace and bin the sky spectrum
	    #
	    acorn::mkrays rays dist uniform n $skysum radius0 15 radius 128
			  rays angles : $ax $ay uniform [expr $slitwidth*1.01] [expr $slitheight*1.01]

	    puts -nonewline "	waves"; flush stdout
	    rays waves $sky

	    puts -nonewline "	trace"; flush stdout
	    B trace rays {} $wave 16



	    puts -nonewline "	bin"; flush stdout
	    puts -nonewline "	v [rays bin ushort $image 4096 4096 $scale $scale]"; flush stdout

#plot-rays rays 21
#exit

	    rename rays {}

	    puts ""
	#if { $row > 4 } { break }
    }

    acorn::poisson ushort $image 4096 4096
    acorn::noise   ushort $image 4096 4096 1000 3
    acorn::fits    ushort $image 4096 4096

    echo [fits 16 { 4096 4096 } { 1 1 } { 0 0 } $image {}] > [file root $mask]-[starbase_name Slits].fits b
 }


 image-hecto {
    lassign $argv file mask field wavel

    if { $field == "" } { set field 1 }
    if { $wavel == "" } { set wavel 1 }

    set x [B get field $field x]
    set y [B get field $field y]
    set w [B get wavelength $wavel wave]

    starbase_readfp T [set fp [open $file]]

    set crval1 [starbase_hdrget T crval1]
    set crpix1 [starbase_hdrget T crpix1]
    set cdelt1 [starbase_hdrget T cdelt1]

    set targets [starbase_select T { row } where { $target ne "sky" && $target ne "unused" }]

    gets $fp line
    set waves [split [string trim [read $fp]] \n]

    foreach i [iota 1 [llength [lindex $waves 0]]] {			; # Create the spectrum wavelength list
	lappend wave [expr { ($i-$crpix1) * $cdelt1 + $crval1 }]
    }

    set scale  [expr { 1.0/($mm2inch*1000/15) }]

    set image [acorn::malloc [expr { 2*4096*4096 }]]

    set seeing 0.7

    starbase_read Slits $mask
    set RA [strtod [starbase_hdrget Slits ra]]
    set DC [strtod [starbase_hdrget Slits dec]]
    set PA [strtod [starbase_hdrget Slits pa]]

    starbase_foreachrow Slits -colvars {

	# Compute the angles of ra and dec
	#
	set ra [expr { ([strtod $ra] -$RA)*15*cos($DC/57.2957795) }]
	set dc [expr {  [strtod $dec]-$DC }]

	lassign [2d::transform [2d::rotate [expr { -$PA }] d] $ra $dc] ax ay
	lassign [maskXY $ax $ay] mx my

	B 21 set aper_xoff $mx
	B 21 set aper_yoff $my

	B 21 set $slitX [expr { 0.084/$mm2inch }]
	B 21 set $slitY [expr { .840/$mm2inch }]

	set mag [expr rand()*3+19.5]
	set counts [counts $mag 1800]
	set box [expr int(sqrt($counts))]

	puts "[format %.2f $mag] $counts $box [format "%.3f %.3f" $ra $dc] $x $y $width $height [format "%.3f %.3f %d" {*}[maskXY $ax $ay]]"


	acorn::mkrays rays nx $box x0 -128 x1 128 ny $box y0 -128 y1 128 circle 1 intensity 1
		      rays angles : $ax $ay normal $seeing

	rays waves [lindex $waves [lindex $targets $row-1]-1] 		; # Add wavelength numbers to rays from spectrum probability function


	B trace rays {} $wave 6
	acorn::prays rays

	rays bin ushort $image 4096 4096 $scale $scale

	rename rays {}
    }

    acorn::poisson ushort $image 4096 4096
    acorn::noise   ushort $image 4096 4096 1000 3
    acorn::fits    ushort $image 4096 4096

    echo [fits 16 { 4096 4096 } { 1 1 } { 0 0 } $image {}] > [file root $mask]-[starbase_name Slits].fits b
 }
 print { B print }
 prays {
    acorn::prays rays
 }
 trak {
    lassign $argv ax ay

    acorn::Rays create ray1 1
    acorn::Rays create trak 79

    ray1 set kz 1.0
    ray1 angles : $ax $ay

    set w1 [B get wavelength 1 wave]
    set w  $w1

    B 1 set aper_type none
    B trace ray1 {} [expr $w*10000] 0 trak

    #acorn::prays ray1
    #puts ""
    acorn::prays trak %.3f
 }
 plot  -
 trace { 
    lassign $argv field wavel

    if { $field == "" } { set field 1 }
    if { $wavel == "" } { set wavel 1 }

    set ax [B get field $field x]
    set ay [B get field $field y]
    set  w [B get wavelength $wavel wave]

    acorn::mkrays rays nx 50 x0 -128 x1 128 ny 50 y0 -128 y1 128 circle 1
	          rays angles : $ax $ay 


    B trace rays {} [expr $w*10000] 16

    puts "RayTrace $model"
    puts ""
    puts "field    	$ax $ay"
    puts "wavelength	$w"
    puts ""

    if { $action eq "plot" } {
	plot-rays rays
    } else { 
	acorn::prays rays
    }
 }
 longslit {
    set wave     { 4500 5000 5500 6000 6500 7000 7500 8000 8500 }

    set spectrum [lrepeat [llength $wave] 1.0]
    set sum [sum $spectrum]
    set spectrum [vnorm $spectrum $sum]

    set ax [B get field 1 x]
    set ay [B get field 1 y]

    lassign [maskXY $ax $ay] mx my

    B 21 set aper_xoff $mx
    B 21 set aper_yoff $my

    B 21 set $slitX [expr { 0.168/$mm2inch }]
    B 21 set $slitY 7.0

    set image [acorn::malloc [expr { 2*4096*4096 }]]

    acorn::mkrays rays nx 1000 x0 -128 x1 128 ny 1000 y0 -128 y1 128 circle 1 intensity 1
		  rays angles : $ax $ay uniform 1.0 [expr 14.0*60]

    rays waves $spectrum	 		; # Add wavelength numbers to rays from spectrum probability function

    B trace rays {} $wave [nproc]
    rays bin ushort $image 4096 4096 $scale $scale
    rename rays {}

    acorn::fits    ushort $image 4096 4096

    echo [fits 16 { 4096 4096 } { 1 1 } { 0 0 } $image {}] > longslit.fits b
 }

}

